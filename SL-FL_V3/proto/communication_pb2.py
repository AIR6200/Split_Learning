# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: communication.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x13\x63ommunication.proto\x12\x04SLFL\"0\n\tSL_Client\x12\r\n\x05label\x18\x01 \x01(\x0c\x12\x14\n\x0c\x63lient_model\x18\x02 \x01(\x0c\"V\n\x0eSL_Client_Eval\x12\x12\n\nlabel_eval\x18\x01 \x01(\x0c\x12\x14\n\x0c\x63lient_model\x18\x02 \x01(\x0c\x12\x1a\n\x12server_config_eval\x18\x03 \x01(\x0c\"!\n\tSL_Server\x12\x14\n\x0cserver_model\x18\x01 \x01(\x0c\"3\n\x12ValidationResponse\x12\x0c\n\x04loss\x18\x01 \x01(\x0c\x12\x0f\n\x07\x63orrect\x18\x02 \x01(\x0c\x32\x34\n\x08Training\x12(\n\x02SL\x12\x0f.SLFL.SL_Client\x1a\x0f.SLFL.SL_Server\"\x00\x32\x45\n\nValidation\x12\x37\n\x03val\x12\x14.SLFL.SL_Client_Eval\x1a\x18.SLFL.ValidationResponse\"\x00\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'communication_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  DESCRIPTOR._options = None
  _globals['_SL_CLIENT']._serialized_start=29
  _globals['_SL_CLIENT']._serialized_end=77
  _globals['_SL_CLIENT_EVAL']._serialized_start=79
  _globals['_SL_CLIENT_EVAL']._serialized_end=165
  _globals['_SL_SERVER']._serialized_start=167
  _globals['_SL_SERVER']._serialized_end=200
  _globals['_VALIDATIONRESPONSE']._serialized_start=202
  _globals['_VALIDATIONRESPONSE']._serialized_end=253
  _globals['_TRAINING']._serialized_start=255
  _globals['_TRAINING']._serialized_end=307
  _globals['_VALIDATION']._serialized_start=309
  _globals['_VALIDATION']._serialized_end=378
# @@protoc_insertion_point(module_scope)
